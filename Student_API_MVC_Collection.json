{
  "info": {
    "name": "Student CRUD REST API - MVC",
    "description": "Comprehensive Postman Collection for Student CRUD API built with Flask in MVC pattern",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://127.0.0.1:5000",
      "type": "string",
      "description": "Base URL for the Student API"
    },
    {
      "key": "api_version",
      "value": "api/v1",
      "type": "string",
      "description": "API version path"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/{{api_version}}/healthcheck",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "healthcheck"
          ]
        },
        "description": "Check if the API server is running and healthy"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Health check returns ok status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql(\"ok\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get All Students",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students"
          ]
        },
        "description": "Retrieve all students from the database"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Response time is less than 1000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Add a Student",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"age\": 20\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students"
          ]
        },
        "description": "Create a new student record with name, email, and age"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Student created successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData.name).to.eql('John Doe');",
              "    pm.expect(jsonData.email).to.eql('john.doe@example.com');",
              "    ",
              "    // Store the created student ID for use in other requests",
              "    pm.globals.set(\"student_id\", jsonData.id);",
              "    pm.globals.set(\"student_name\", jsonData.name);",
              "    pm.globals.set(\"student_email\", jsonData.email);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Add Student - Validation Test (Missing Email)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Jane Doe\",\n  \"age\": 22\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students"
          ]
        },
        "description": "Test validation - should fail due to missing email field"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Validation error returned\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('errors');",
              "    pm.expect(jsonData.errors).to.be.an('array');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Add Student - Invalid Email Test",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Invalid Email User\",\n  \"email\": \"not-a-valid-email\",\n  \"age\": 25\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students"
          ]
        },
        "description": "Test email validation with invalid email format"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Email validation error returned\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('errors');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Student by ID",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students/{{student_id}}",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students",
            "{{student_id}}"
          ]
        },
        "description": "Retrieve a specific student by their ID (uses ID from previous create request)"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Student details returned correctly\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData).to.have.property('email');",
              "    pm.expect(jsonData).to.have.property('age');",
              "});",
              "",
              "pm.test(\"Response time is less than 500ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Student by ID - Not Found",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students/99999",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students",
            "99999"
          ]
        },
        "description": "Test retrieving a non-existent student (should return 404)"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Not found error message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "    pm.expect(jsonData.error).to.include('not found');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Update a Student (Full Update)",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"John Smith Updated\",\n  \"email\": \"john.smith.updated@example.com\",\n  \"age\": 21\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students/{{student_id}}",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students",
            "{{student_id}}"
          ]
        },
        "description": "Update all fields of an existing student"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Student updated successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.name).to.eql('John Smith Updated');",
              "    pm.expect(jsonData.email).to.eql('john.smith.updated@example.com');",
              "    pm.expect(jsonData.age).to.eql(21);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Update a Student (Partial Update)",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"age\": 23\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students/{{student_id}}",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students",
            "{{student_id}}"
          ]
        },
        "description": "Update only specific fields of a student (partial update)"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Student age updated correctly\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.age).to.eql(23);",
              "    // Name and email should remain unchanged",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData).to.have.property('email');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Update Student - Not Found",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Non Existent Student\",\n  \"email\": \"nonexistent@example.com\",\n  \"age\": 25\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students/99999",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students",
            "99999"
          ]
        },
        "description": "Test updating a non-existent student (should return 404)"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Not found error message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete a Student",
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students/{{student_id}}",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students",
            "{{student_id}}"
          ]
        },
        "description": "Delete a student record (uses ID from previous create request)"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Student deleted successfully\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.include('deleted');",
              "});",
              "",
              "// Clean up the global variable",
              "pm.globals.unset(\"student_id\");"
            ]
          }
        }
      ]
    },
    {
      "name": "Delete Student - Not Found",
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/{{api_version}}/students/99999",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "{{api_version}}",
            "students",
            "99999"
          ]
        },
        "description": "Test deleting a non-existent student (should return 404)"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Not found error message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
